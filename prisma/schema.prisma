// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id    Int  @id  @default(autoincrement()) 
  title  String
  filePath  String
  nodes    Node[]
  edges    Edge[]

  annotations Annotation[]
  userId  Int?
  user  User? @relation(fields: [userId], references:[id])

  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model Node {
  id      Int @id @default(autoincrement())
  label   String
  title   String? // nullable
  att_goal  String? // nullable
  att_method  String? // nullable
  att_background  String? // nullable
  att_future  String? // nullable
  att_gaps  String? // nullable
  att_url  String? // nullable
  type    String
  content String

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int

  fromEdges Edge[]  @relation("EdgeFrom")
  toEdges Edge[]  @relation("EdgeTo")
}

model Edge {
  id      Int  @id  @default(autoincrement())
  fromId    Int 
  toId      Int
  relation  String?
  label     String?
  color     String?

  from      Node  @relation("EdgeFrom" ,fields: [fromId], references: [id], onDelete: Cascade)
  to      Node  @relation("EdgeTo", fields: [toId], references: [id], onDelete: Cascade)

  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId  Int

  @@unique([fromId, toId, relation])
}

model Analytics {
  id  Int  @id @default(autoincrement())
  action  String
  document  String?
  userId  String?
  metadata  Json?
  timestamp DateTime @default(now())

  @@map("analytics")
}

enum Role{
  USER
  ADMIN
}

model User {
  id  Int @id @default(autoincrement())
  email String  @unique
  name  String?
  password  String
  role  Role  @default(USER)
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt

  articles  Article[]
  drafts  Draft[]
  annotations Annotation[]
}

model Draft {
  id  Int @id @default(autoincrement())
  userId  Int?
  user  User? @relation(fields: [userId], references: [id])
  title String
  sections  DraftSection[]
  createdAt DateTime  @default(now())
}

model DraftSection {
  id  Int @id @default(autoincrement())
  draftId Int
  draft Draft @relation(fields: [draftId], references: [id], onDelete: Cascade)
  title String
  content String
  annotations Annotation[]
}

model Annotation {
  id  Int @id @default(autoincrement())
  userId Int? 
  user User?  @relation(fields: [userId], references: [id])
  articleId  Int?
  article Article? @relation(fields: [articleId], references: [id])
  page  Int
  highlightedText String
  comment String
  semanticTag String?
  draftSectionId  Int?
  draftSection  DraftSection? @relation(fields: [draftSectionId], references: [id])
  createdAt DateTime  @default(now())
}
